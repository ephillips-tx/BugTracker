@model BugTracker.Models.ViewModels.DashboardViewModel
@using Microsoft.AspNetCore.Identity
@using BugTracker.Services.Interfaces
@using BugTracker.Models.Enums
@inject UserManager<BTUser> UserManager;
@inject IBTRolesService RolesService;

@{
	ViewData["Title"] = "Dashboard";
	BTUser btUser = await UserManager.GetUserAsync(User);
	var defaultIconSrc = "https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png";
}

<div class="row fw-bolder mt-3 sticky-top blk-grad rounded">
	<div class="col-2">
		<a href="/" class="link-style">
			<i class="bi bi-arrow-left"></i>
		</a>
		<span>Dashboard</span>
	</div>
	<div class="col-10">
        <div class="row py-2">
            <div class="col-sm-3 col-md-5"></div>
            <form method="post" class="col-sm-2 col-md-3">
                <div class="input-group border-0">
                    <input type="text" class="form-control" placeholder="Search here..." />
                    <button type="submit" class="input-group-text border-0"><i class="bi bi-search"></i></button>
                </div>
            </form>
            <div class="col-sm-7 col-md-4 d-flex justify-content-end align-items-center">
                <a asp-controller="Tickets" asp-action="Create" class="btn btn-sm btn-primary mx-2">New Ticket</a>
                <a href="/" class="text-decoration-none d-flex position-relative mx-4 px-2 link-style">
                    <i class="bi bi-bell"></i>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger x-sm">
                        +99
                        <span class="visually-hidden">unread notifications</span>
                    </span>
                </a>
                <i class="bi bi-sliders mx-3"></i>
                <i class="bi bi-box-arrow-left mx-3"></i>
            </div>
        </div>
    </div>
</div>
@*<a href="javascript:void(0);">
	@if (btUser?.AvatarFileData != null)
	{
		<img class="media-object" src="data:image/*;base64,@(Convert.ToBase64String(btUser.AvatarFileData))" alt="">
	}
	else
	{
		<img class="media-object" src="@defaultIconSrc" alt="" style="width:30px;height:30px">
	}
</a>*@

<div class="my-4">
	<div class="mx-4">
		<div class="row mb-3">
			<div class="col-lg-3 col-md-6 col-sm-6 mt-4">
				<a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
					<div class="card text-center dash-card">
						<div class="position-relative">
							<div class="d-flex align-items-center rounded text-light" id="panel1">
								<i class="fs-5 bi-file-earmark-ppt mx-auto"></i>
							</div>
							<div class="p-5 text-light">
								<h3>@Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
								<span>Active Projects</span>
							</div>
						</div>
					</div>
				</a>
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6 mt-4">
				<a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
					<div class="card text-center dash-card">
						<div class="position-relative">
							<div class="d-flex align-items-center rounded text-light" id="panel2">
								<i class="fs-5 bi-file-earmark-font mx-auto"></i>
							</div>
							<div class="p-5 text-light">
								<h3>@Model.Tickets.Count()</h3>
								<span>Total Tickets</span>
							</div>
						</div>
					</div>
				</a>
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6 mt-4">
				<div class="card text-center dash-card">
					<div class="position-relative">
						<div class="d-flex align-items-center rounded text-light" id="panel3">
							<i class="fs-5 bi-bug mx-auto"></i>
						</div>
						<div class="p-5 text-light">
							<h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
							<span>Unassigned Tickets</span>
						</div>
					</div>
				</div>
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6 mt-4">
				<div class="card text-center dash-card">
					<div class="position-relative">
						<div class="d-flex align-items-center rounded text-light" id="panel4">
							<i class="fs-5 bi-bricks mx-auto"></i>
						</div>
						<div class="p-5 text-light">
							<h3>
								@(
								Model.Projects.Count()
								+ Model.Tickets.Count()
								+ Model.Members.Count()
								)
							</h3>
							<span>Total Data Analytics</span>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12 col">
				<div class="row mt-5">
					<div class="col-12 col-sm-6 col-md-4">
						<div class="card p-2 dash-card">
							<div class="card-header-chart position-relative rounded pt-3 mx-auto" id="chart1">
								<div class="inner-header">
									<div id="chart3D"></div>
								</div>
							</div>
							<div class="card-body">
								<h5>Projects by Priority</h5>
								<p class="text-pink">[Google Charts]</p>
							</div>
						</div>
					</div>
					<div class="col-12 col-sm-6 col-md-4">
						<div class="card p-2 dash-card">
							<div class="card-header-chart position-relative rounded pt-3 mx-auto" id="chart2">
								<div class="inner-header">
									<div id="donut"></div>
								</div>
							</div>
							<div class="card-body">
								<h5>Project Tickets Count (%)</h5>
								<p class="text-pink">[Google Charts]</p>
							</div>
						</div>
					</div>
					<div class="col-12 col-sm-6 col-md-4">
						<div class="card p-2 dash-card">
							<div class="card-header-chart position-relative rounded pt-3 mx-auto" id="chart3">
								<div class="inner-header">
									<!-- Morris: Donut -->
									<div class="chart chart-md" id="morrisTicketPriority"></div>
									<div id="legend" class="donut-legend" style="font-size:x-small"></div>
								</div>
							</div>
							<div class="card-body">
								<h5>Tickets by Priority</h5>
								<p class="text-pink">[Morris Charts]</p>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row mt-5 align-items-center">
			<div class="col-12 col-md-9">
				<div class="card dash-card col m-1 p-2">
					<div class="card-body" style="height:600px">
						<h5>Project: Tickets vs Developers</h5>
						<p class="text-pink">[amCharts]</p>
						<!-- HTML -->
						<div id="chartdiv"></div>
					</div>
				</div>
			</div>
			<div class="col col-md-3">
				<div class="card p-2 dash-card">
					<div class="card-header-chart position-relative rounded" id="chart4">
						<div class="inner-header px-5">
							<!-- ChartJS: Pie/Doughnut -->
							<!--  Chart.js Canvas Tag -->
							<canvas id="donutChart"></canvas>
						</div>
					</div>
					<div class="card-body">
						<h5>Tickets by Status</h5>
						<p class="text-pink">[ChartJS]</p>
					</div>
				</div>
			</div>
		</div>
		<div class="row g-2">
			<div class="cols mt-5">
				<div class="card dash-card col m-1 p-2">
					<div class="card-body" style="height:600px" id="plotBody">
						<h5>Project: Tickets vs Developers</h5>
						<p class="text-pink">[Plotly]</p>
						<!-- HTML -->
						<div id="plotlyChart"></div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<hr />
	<div class="my-5 mx-4">
		<div class="row">
			@* Projects Table *@
			<div class="col-12 col-lg-6 mb-3">
				<div class="">
					<div class="card dash-card m-1 p-2">
						<div class="card-header">
							<h2>Projects</h2>
						</div>
						<div class="card-body">
							<div class="table-responsive" style="overflow-y:auto;height:600px;">
								<table class="table table-hover">
									<thead class="text-pink">
										<tr>
											<th>Name</th>
											<th>Start Date</th>
											<th>End Date</th>
											<th>Priority</th>
											<th>Action</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var project in Model.Projects.OrderByDescending(d => d.StartDate))
										{
											<tr>
												<td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@project.Id" style="color:#f8f9fa"><strong>@project.Name</strong></a> </td>
												<td><span style="font-size:small;color: #f8f9fa">@project.StartDate.ToString("MM.dd.yyyy")</span></td>
												<td><span style="font-size:small;color: #f8f9fa">@project.EndDate.ToString("MM.dd.yyyy")</span></td>
												@{
													string badgeColor = "bg-info";
													switch (project.ProjectPriority?.Name)
													{
														case "Urgent":
															badgeColor = "bg-danger";
															break;
														case "High":
															badgeColor = "bg-warning";
															break;
														case "Medium":
															badgeColor = "bg-primary";
															break;
														default:
															break;
													}
												}
												<td><span class="badge @badgeColor">@project.ProjectPriority?.Name</span></td>
												<td>
													<a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Project" asp-route-id="@project.Id"><i class="fs-5 bi-justify"></i></a>
												</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>
						<div class="card-footer">
						</div>
					</div>
				</div>
			</div>
			@* Tickets Table *@
			<div class="col-12 col-lg-6 mb-3">
				<div class="">
					<div class="card dash-card m-1 p-2">
						<div class="card-header">
							<h2>Tickets</h2>
						</div>
						<div class="card-body">
							<div class="table-responsive" style="overflow-y:auto;height:600px;">
								<table class="table table-hover">
									<thead class="text-pink">
										<tr>
											<th>Title</th>
											<th>Developer</th>
											<th>Status</th>
											<th>Priority</th>
											<th>Date</th>
											<th>Action</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var ticket in Model.Tickets.OrderByDescending(d => d.Created))
										{
											<tr>
												<td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id" style="color:#f8f9fa"><strong>@ticket.Title</strong></a> </td>
												<td>
													@if (ticket.DeveloperUserId != null)
													{
														<span class="text-light">@ticket.DeveloperUser?.FullName</span>
													}
													else
													{
														<span class="badge bg-warning text-dark">Unassigned</span>
													}
												</td>
												@if (ticket.TicketStatus.Name == "New")
												{
													<td><span class="badge bg-success rounded-pill">@ticket.TicketStatus.Name</span></td>
												}
												else
												{
													<td><span class="badge bg-secondary rounded-pill">@ticket.TicketStatus.Name </span></td>
												}
												@{
													string badgeColor = "bg-info";
													switch (ticket.TicketPriority.Name)
													{
														case "Urgent":
															badgeColor = "bg-danger";
															break;
														case "High":
															badgeColor = "bg-warning";
															break;
														case "Medium":
															badgeColor = "bg-primary";
															break;
														default:
															break;
													}
												}
												<td><span class="badge @badgeColor">@ticket.TicketPriority.Name </span></td>
												<td><span style="font-size:small;color: #f8f9fa">@ticket.Created.ToString("MM-dd-yyyy")</span></td>
												<td>
													<a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id"><i class="fs-5 bi-justify"></i></a>
												</td>
											</tr>
										}
									</tbody>
								</table>
							</div>

						</div>
						<div class="card-footer">
						</div>
					</div>
				</div>
			</div>
			@*Members Table*@
			<div class="col-md-6">
				<div class="">
					<div class="card dash-card m-1 p-2">
						<div class="card-header">
							<h2>Members</h2>
							<hr />
						</div>
						<div class="card-body" style="overflow-y:auto;height:600px;">
							@foreach(BTUser member in Model.Members)
							{
								<div class="">
									<span style="font-weight:bold">@member.FullName</span>
									<h6 style="font-size:small;color:deeppink">@((await RolesService.GetUserRolesAsync(member)).FirstOrDefault())</h6>
								</div>
								<hr />
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{
	<script>
		var el = document.getElementById("chart1");
		var cardStyle = el.currentStyle || getComputedStyle(el, null);
		var chart1Color = document.getElementById("panel4").style.backgroundColor;
		var chart2Color = document.getElementById("panel3").style.backgroundColor;
		var bsColors = {
			primary: "#0d6efd",
		    secondary: "#6c757d",
			success: "#198754",
			info: "#0dcaf0",
			warning: "#ffc107",
			danger: "#dc3545",
			light: "#f8f9fa",
			dark: "#212529",
			maroon: "#800000",
			transparent: "rgba(0,0,0,0)"
		};

	</script>
	<!--Google Charts-->
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>

	<script type="text/javascript">
		google.load("visualization", "1", { packages: ["corechart"] });
		google.setOnLoadCallback(drawChart);
		function drawChart() {
			$.ajax({
				type: "POST",
				url: "/Home/GglProjectPriority",
				data: '{}',
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (result) {
					var data = google.visualization.arrayToDataTable(result);

					//3D Pie
					var options = {
						title: 'Project Priority',
						is3D: true,
						backgroundColor: chart1Color,
						chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
						legend: { 
							position: 'bottom',
							textStyle: {color: cardStyle.color}
						}

					};

					var chart = new google.visualization.PieChart($("#chart3D")[0]);
					chart.draw(data, options);
				},
				failure: function (rresult) {
					alert(result.d);
				},
				error: function (result) {
					alert(result.d);
				}
			});
		}
	</script>
	<script type="text/javascript">
		google.load("visualization", "1", { packages: ["corechart"] });
		google.setOnLoadCallback(drawChart);
		function drawChart() {
			$.ajax({
				type: "POST",
				url: "/Home/GglProjectTickets",
				data: '{}',
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (result) {
					var data = google.visualization.arrayToDataTable(result);

					//Donut
					var options = {
						title: 'Company Ticket Distribution',
						pieHole: 0.3,
						backgroundColor: chart2Color,
						chartArea: { left: 0,bottom: 15,width: '100%', height: '100%'},
						legend: {
							position: 'bottom',
							textStyle: { color: cardStyle.color }
						}
					};
					var chart = new google.visualization.PieChart($("#donut")[0]);
					chart.draw(data, options);
				},
				failure: function (rresult) {
					alert(result.d);
				},
				error: function (result) {
					alert(result.d);
				}
			});
		}
	</script>

	@* Morris Donut Chart *@
	<script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>
	<script>

		var morrisDonutData = [{
			label: "Low",
			value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriority.Low)).Count()
		}, {
			label: "Medium",
			value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriority.Medium)).Count()
		}, {
			label: "High",
			value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriority.High)).Count()
		}, {
			label: "Urgent",
			value: @Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(BTTicketPriority.Urgent)).Count()
		}];

		/*
		  Morris: Donut
		*/
		if ($('#morrisTicketPriority').get(0)) {
			var donutChart = Morris.Donut({
				resize: true,
				element: 'morrisTicketPriority',
				data: morrisDonutData,
				colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
			});
			
			donutChart.options.data.forEach(function(label, i) {
				var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span></span>');
				legendItem.find('span')
				  .css('backgroundColor', "#333")
				  .css('width', '0px')
				  .css('display', 'inline-block')
				  .css('margin', '3%');
				$('#legend').append(legendItem)
			});
			
		};
		/* ********************** 
			SVG Adjustments:
			  color, position
		*********************** */
		var svgText = document.querySelectorAll('text');
		for(var i =0; i < svgText.length; i++){
			//svgText[i].attributes[5].value = cardStyle.color;
			//console.log(svgText[i]);
		}
		var morrisChart = document.getElementById('morrisTicketPriority').firstChild;
		//morrisChart.style.top = '-20px';
		morrisChart.style.height = '200px';
	</script>

	<!-- *** Begin Chart JS Pie/Donut *** -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
	<script>

		var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
		var donutData = {
			labels: [
				'@nameof(BTTicketStatus.Development)',
				'@nameof(BTTicketStatus.New)',
				'@nameof(BTTicketStatus.Resolved)',
				'@nameof(BTTicketStatus.Testing)'
			],
			datasets: [
				{
					data: [
						@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count(),
						@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatus.New)).Count(),
						@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatus.Resolved)).Count(),
						@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(BTTicketStatus.Testing)).Count()
						],
					backgroundColor: [
						'rgba(255, 99, 132, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(75, 192, 192, 0.2)'
					],
					borderColor: [
						'rgba(255, 99, 132, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)',
						'rgba(75, 192, 192, 1)'
					]
				}
			]
		};

		var donutOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		//Create pie or douhnut chart
		// You can switch between pie and doughnut using the method below.
		new Chart(donutChartCanvas, {
			type: 'doughnut',
			data: donutData,
			options: donutOptions
		});
	</script>
	<!-- *** End Chart JS Donut *** -->

	<!-- *** Begin AM Charts *** -->
	<!-- Resources -->
	<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
	<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

	<!-- Chart code -->
	<script>
		$.ajax({
			type: "POST",
			url: "/Home/AmCharts",
			data: '{}',
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function (result) {
				am4core.ready(function () {
					// Themes begin
					// Themes end

					// Create chart instance
					var chart = am4core.create("chartdiv", am4charts.XYChart);

					// Add data
					chart.data = result;

					// Create axes
					var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
					categoryAxis.dataFields.category = "project";
					categoryAxis.numberFormatter.numberFormat = "#";
					categoryAxis.renderer.inversed = true;
					categoryAxis.renderer.grid.template.location = 0;
					categoryAxis.renderer.cellStartLocation = 0.1;
					categoryAxis.renderer.cellEndLocation = 0.9;

					var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
					valueAxis.renderer.opposite = true;

					// Create series
					function createSeries(field, name) {
						var series = chart.series.push(new am4charts.ColumnSeries());
						series.dataFields.valueX = field;
						series.dataFields.categoryY = "project";
						series.name = name;
						series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
						series.columns.template.height = am4core.percent(100);
						series.sequencedInterpolation = true;

						var valueLabel = series.bullets.push(new am4charts.LabelBullet());
						valueLabel.label.text = "{valueX}";
						valueLabel.label.fill = am4core.color("#fff");
						valueLabel.label.horizontalCenter = "left";
						valueLabel.label.dx = 10;
						valueLabel.label.hideOversized = false;
						valueLabel.label.truncate = false;

						var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
						categoryLabel.label.text = "{name}";
						categoryLabel.label.horizontalCenter = "right";
						categoryLabel.label.dx = -10;
						categoryLabel.label.fill = am4core.color("#fff");
						categoryLabel.label.hideOversized = false;
						categoryLabel.label.truncate = false;
					}

					createSeries("tickets", "Tickets");
					createSeries("developers", "Devs");

				}); // end am4core.ready()

			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});
	</script>
	<!-- *** End AM Charts *** -->

	<!--  Plotly Charts  -->
	<!-- Load plotly.js into the DOM -->
	<script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
	<script>
		document.getElementById('plotlyChart').style.width = "80%"; // adjust svg size by adjusting container size
		$.ajax({
			type: "POST",
			url: "/Home/PlotlyBarChart",
			data: '{}',
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function (result) {
				var data = result;

				// layout doesn't appear to be doing anything at all
				var layout = { 
				//	autosize: false,
				//	barmode: 'group',
				//	paper_bgcolor: '#333',
				};

				var config = { responsive: true };

				Plotly.newPlot('plotlyChart', data, layout, config);
			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});
		window.onload = () => {
			document.getElementById('plotBody').style.height = "700px"; // after page loads, increase container width
		}
	</script>
}