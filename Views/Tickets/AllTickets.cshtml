@model IEnumerable<BugTracker.Models.Ticket>
@using Microsoft.AspNetCore.Identity
@using BugTracker.Services.Interfaces
@using BugTracker.Models.Enums

@inject UserManager<BTUser> userManager
@inject IBTProjectService projectService

@{
    ViewData["Title"] = "All Tickets";
    BTUser btUser = await userManager.GetUserAsync(User);
}

<style>
    #chart1, #donut1, #donut2, #donut3 {
        background-image: none;
    }

    #donut1 > div > div:nth-child(1) > div > svg > g:nth-child(4) > text,
    #donut2 > div > div:nth-child(1) > div > svg > g:nth-child(3) > text,
    #donut3 > div > div:nth-child(1) > div > svg > g:nth-child(3) > text {
        fill: transparent;
    }

    #donutLabel1, #donutLabel2, #donutLabel3 {
        position: absolute;
        top: 37%;
        left: 50%;
        transform: translate(-50%,-50%);
        font-size: 3rem;
    }
</style>

<div class="col-12">
    <div class="row mb-3">
        <div class="col-lg-3 col-md-6 col-sm-6 mt-4">
			<div class="card text-center dash-card py-3" id="card1">
                <div id="chart1">
                    <div id="chart3D"></div>
                </div>	
				<div>
                    <h3 class="text-light">@Model.Count()</h3>
					<span class="text-secondary fw-bolder">Total Tickets By Project</span>
				</div>
			</div>
		</div>
        <div class="col-lg-3 col-md-6 col-sm-6 mt-4">
			<div class="card text-center dash-card py-3">
                <div>
                    <div id="donut1"></div>
                </div>
				<div>
					<h3 class="text-light">@Model.Where(t=>t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count()</h3>
					<span class="text-secondary fw-bolder">Status: Open</span>
				</div>
			</div>
		</div>
        <div class="col-lg-3 col-md-6 col-sm-6 mt-4">
			<div class="card text-center dash-card py-3">
                <div>
                    <div id="donut2"></div>
                </div>
				<div>
					<h3 class="text-light">@Model.Where(t=>t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count()</h3>
					<span class="text-secondary fw-bolder">Status: Development</span>
				</div>
			</div>
		</div>
        <div class="col-lg-3 col-md-6 col-sm-6 mt-4">
            <div class="card text-center dash-card py-3">
                <div>
                    <div id="donut3"></div>
                </div>
                <div>
                    <h3 class="text-light">@Model.Where(t=>t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count()</h3>
                    <span class="text-secondary fw-bolder">Status: Closed</span>
                </div>
            </div>
        </div>
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Created)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Updated)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Archived)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Project)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TicketType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TicketPriority)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TicketStatus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OwnerUser)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DeveloperUser)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Created)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Updated)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Archived)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Project.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TicketType.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TicketPriority.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TicketStatus.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.OwnerUser.FullName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DeveloperUser.FullName)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                @if(User.IsInRole(nameof(Roles.Admin)) || item.DeveloperUserId == btUser.Id || item.OwnerUserId == btUser.Id || await projectService.IsAssignedProjectManagerAsync(btUser.Id, item.ProjectId) )
                {
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> 
                }
                @if(User.IsInRole(nameof(Roles.Admin)) || await projectService.IsAssignedProjectManagerAsync(btUser.Id, item.ProjectId))
                {
                    if(item.Archived)
                    {
                        <a asp-action="Restore" asp-route-id="@item.Id">Restore</a>
                    }
                    else
                    {
                        <a asp-action="Archive" asp-route-id="@item.Id">Archive</a> 
                    }
                }
                
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts{
    <script>
        var el = document.getElementById("card1");
        var cardStyle = el.currentStyle || getComputedStyle(el, null);
        //console.log(cardStyle);
    </script>

    <!--Google Charts-->
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <!-- Pie #1 -->
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Tickets/GglTicketsByProject",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var data = google.visualization.arrayToDataTable(result);

                    //2D Pie
                    var options = {
                        title: 'Total Tickets By Project',
                        is3D: false,
                        backgroundColor: { fill: cardStyle.backgroundColor },
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: {
                            position: 'top', // not visible
                            textStyle: { color: cardStyle.color }
                        }

                    };

                    var chart = new google.visualization.PieChart($("#chart3D")[0]);
                    chart.draw(data, options);
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <!-- Donut #1 -->
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Tickets/GglOpenTickets",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var chColor = 'deeppink';
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Open Tickets',
                        pieHole: 0.9,
                        backgroundColor: { fill: cardStyle.backgroundColor },
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: 'none',
                        pieSliceText: 'label',
                        slices: {0: {color: chColor}, 1: {color: 'lightgray'}}
                    };
                    var chart = new google.visualization.PieChart($("#donut1")[0]);
                    chart.draw(data, options);
                    addDonutChartLabel("#donut1", chColor)
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <!-- Donut #2 -->
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Tickets/GglDevTickets",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var chColor = 'dodgerblue';
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Development Tickets',
                        pieHole: 0.9,
                        backgroundColor: { fill: cardStyle.backgroundColor },
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: 'none',
                        pieSliceText: 'label',
                        slices: { 0: { color: chColor }, 1: { color: 'lightgray' } }
                    };
                    var chart = new google.visualization.PieChart($("#donut2")[0]);
                    chart.draw(data, options);
                    addDonutChartLabel("#donut2", chColor)
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>
    <!-- Donut #3 -->
    <script type="text/javascript">
        google.load("visualization", "1", { packages: ["corechart"] });
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            $.ajax({
                type: "POST",
                url: "/Tickets/GglResolvedTickets",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (result) {
                    var chColor = 'darkorange';
                    var data = google.visualization.arrayToDataTable(result);

                    //Donut
                    var options = {
                        title: 'Closed Tickets',
                        pieHole: 0.9,
                        backgroundColor: { fill: cardStyle.backgroundColor },
                        chartArea: { left: 0, bottom: 15, width: '100%', height: '100%' },
                        legend: 'none',
                        pieSliceText: 'label',
                        slices: { 0: { color: chColor }, 1: { color: 'lightgray' } }
                    };
                    var chart = new google.visualization.PieChart($("#donut3")[0]);
                    chart.draw(data, options);
                    addDonutChartLabel("#donut3", chColor)
                },
                failure: function (rresult) {
                    alert(result.d);
                },
                error: function (result) {
                    alert(result.d);
                }
            });
        }
    </script>

    <script>
        var chartCount = 1;
        function addDonutChartLabel(chartId, donutColor){
            var gNum = 4;
            if (chartId == "#donut2" || chartId == "#donut3") gNum = 3
            var selection = chartId + " > div > div:nth-child(1) > div > svg > g:nth-child("+gNum+") > text"
            var chartTextElement = document.querySelector(selection)
            if(chartTextElement == null) {
                var selection0 = selection.substring(0, selection.length - 7)
                var thisEl = document.querySelector(selection0)
                var newTextEl = document.createElement("text")
                newTextEl.textContent = "0%"
                thisEl.appendChild(newTextEl)
                chartTextElement = document.querySelector(selection)
            }
            var donutChart = document.getElementById(chartId.substring(1))
            var newId = "donutLabel"+chartCount 
            donutChart.appendChild(createLabel(newId, donutColor, chartTextElement.textContent))
            chartCount++;
            //console.log(chartCount);
        }
        function createLabel(id, color, text){
            var newElement = document.createElement("span")
            newElement.id = id
            newElement.style.color = color
            newElement.textContent = text

            return newElement;
        }
    </script>
}